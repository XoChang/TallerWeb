{
	"info": {
		"_postman_id": "be8ae63d-3390-4ab7-b75e-52c275b8c5d8",
		"name": "Taller Web - Grupo 3",
		"description": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32633866"
	},
	"item": [
		{
			"name": "Register user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"try {",
							"    let responseJson = pm.response.json();",
							"    console.log(\"Response JSON:\", responseJson);",
							"} catch (e) {",
							"    console.log(\"Response is not JSON. Raw text:\", pm.response.text());",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Preparando solicitud de registro...\");",
							"pm.environment.set(\"requestTimestamp\", new Date().toISOString());",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstName",
							"value": "user2",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "us",
							"type": "text"
						},
						{
							"key": "address",
							"value": "addressss",
							"type": "text"
						},
						{
							"key": "postalCode",
							"value": "1524",
							"type": "text"
						},
						{
							"key": "phoneNumber",
							"value": "5874487",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Lima",
							"type": "text"
						},
						{
							"key": "emailId",
							"value": "iiiiii@iiii.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						},
						{
							"key": "checkbox",
							"value": "on",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/auth/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"register"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Iniciando solicitud de login...\");",
							"pm.environment.set(\"loginTimestamp\", new Date().toISOString());",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica que la respuesta sea 200 OK",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verifica que el tiempo de respuesta sea menor a 1 segundo",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "emailId",
							"value": "samu@samu.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "root123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "All users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Limpiar variables de entorno antes de ejecutar la solicitud",
							"pm.environment.unset(\"user_emails\");",
							"",
							"// Registrar la fecha y hora de la solicitud",
							"pm.environment.set(\"request_timestamp\", new Date().toISOString());",
							"",
							"console.log(\"Pre-request Script ejecutado.\");",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar que la respuesta sea exitosa (código 200)",
							"pm.test(\"Respuesta exitosa - Código 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que el contenido de la respuesta es HTML",
							"pm.test(\"Respuesta es HTML\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"text/html;charset=UTF-8\");",
							"});",
							"",
							"// Extraer correos electrónicos de la respuesta usando regex",
							"let responseBody = pm.response.text();",
							"const emailRegex = /data-post-id=\"([^\"]+)\"/g;",
							"let emails = [];",
							"let match;",
							"",
							"while ((match = emailRegex.exec(responseBody)) !== null) {",
							"    emails.push(match[1]);",
							"}",
							"",
							"// Guardar los correos extraídos en una variable de entorno si hay al menos uno",
							"if (emails.length > 0) {",
							"    pm.environment.set(\"user_emails\", JSON.stringify(emails));",
							"}",
							"",
							"// Test para verificar que se hayan extraído correos electrónicos",
							"pm.test(\"Correos electrónicos extraídos correctamente\", function () {",
							"    pm.expect(emails.length).to.be.above(0);",
							"});",
							"",
							"// Mostrar en consola los correos extraídos",
							"console.log(\"Correos extraídos:\", emails);",
							"console.log(\"Post-request Script ejecutado.\");",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "__hstc=181257784.17400c2087d4f771fe40dfe1123596e0.1728485503318.1728485503318.1728485503318.1; hubspotutk=17400c2087d4f771fe40dfe1123596e0; __stripe_mid=ff1713b6-14f3-4d70-a9ca-476f77737db20a5e53; JSESSIONID=45305AC1671CB26429C83FBD64F0052E",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/view_all_users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"view_all_users"
					],
					"query": [
						{
							"key": "Cookie",
							"value": "__hstc=181257784.17400c2087d4f771fe40dfe1123596e0.1728485503318.1728485503318.1728485503318.1; hubspotutk=17400c2087d4f771fe40dfe1123596e0; __stripe_mid=ff1713b6-14f3-4d70-a9ca-476f77737db20a5e53; JSESSIONID=45305AC1671CB26429C83FBD64F0052E",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All roles",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1",
			"disabled": true
		},
		{
			"key": "base_url",
			"value": "http://localhost:8000"
		}
	]
}